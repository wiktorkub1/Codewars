#include <iostream>
#include <string>
#include <map>

std::map<std::string, std::string> MORSE_CODE{
    {".-", "A"}, {"-...", "B"}, {"-.-.", "C"},
    {"-..", "D"}, {".", "E"}, {"..-.", "F"},
    {"--.", "G"}, {"....", "H"}, {"..", "I"},
    {".---", "J"}, {"-.-", "K"}, {".-..", "L"},
    {"--", "M"}, {"-.", "N"}, {"---", "O"},
    {".--.", "P"}, {"--.-", "Q"}, {".-.", "R"},
    {"...", "S"}, {"-", "T"}, {"..-", "U"},
    {"...-", "V"}, {".--", "W"}, {"-..-", "X"},
    {"-.--", "Y"}, {"--..", "Z"},
    {".----", "1"}, {"..---", "2"}, {"...--", "3"},
    {"....-", "4"}, {".....", "5"}, {"-....", "6"},
    {"--...", "7"}, {"---..", "8"}, {"----.", "9"},
    {"-----", "0"}, };

std::string decodeMorse(std::string morseCode) {
    std::string word;
    std::string sentence;
    int a = 0;
    while (morseCode.at(a) == 32) {
        a++;
    }
    for (auto it = morseCode.begin() + a; it != morseCode.end(); it++) {
        
        if (*it == ' ' && *(it+1) == ' ' && *(it+2) == ' ') {
            sentence += MORSE_CODE[word];
            sentence += " ";
            word = "";
        }
        else if(*it == ' '){
            sentence += MORSE_CODE[word];
            word = "";
        }
        else {
            word += *it;
        }
    }
    sentence += MORSE_CODE[word];
    return sentence;
}

int main() {
    std::string message{ "   .... . -.--   .--- ..- -.. ." };

    std::cout << decodeMorse(message);
}
